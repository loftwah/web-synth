{"version":3,"sources":["components/DrumButton.js","components/PlayButton.js","components/Pad.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["DrumButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pressed","synth","Tone","toMaster","playSynth","bind","assertThisInitialized","stopSynth","startTime","setState","triggerAttack","pitch","triggerRelease","returnNote","endtime","_this2","react_default","a","createElement","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","className","Component","PlayButton","triggerSynth","schedule","loopEnd","loop","time","triggerAttackRelease","toggle","play","Pad","sequence","note","console","log","push","endTime","Grid_default","container","spacing","justify","item","sm","components_DrumButton","components_PlayButton","App","components_Pad","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.235a5045.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport * as Tone from 'tone';\n//import * as mm from '@magenta/music';\n\n\nclass DrumButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false,\n    };\n    this.synth = new Tone.AMSynth().toMaster();\n    this.playSynth = this.playSynth.bind(this);\n    this.stopSynth = this.stopSynth.bind(this);\n    this.startTime = null;\n\n  }\n\n  playSynth() {\n    this.setState({pressed: true});\n    this.synth.triggerAttack(this.props.pitch);\n    this.startTime = 'now';\n  }\n\n  stopSynth() {\n    this.setState({pressed: false});\n    this.synth.triggerRelease();\n    this.props.returnNote({\n      pitch: this.props.pitch,\n      startTime: this.startTime,\n      endtime: 'now'\n    });\n    // this.setState({startTime: null});\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onMouseDown={() => this.playSynth()}\n          onMouseUp={() => this.stopSynth()}\n          onTouchStart={() => this.playSynth()}\n          onTouchEnd={() => this.stopSynth()}\n          className={this.state.pressed ? \"drum-button pressed\" : \"drum-button\"}\n        />\n      </div>\n    )\n  }\n}\n\nexport default DrumButton;","import React, { Component } from 'react';\n\nimport * as Tone from 'tone';\n//import * as mm from '@magenta/music';\n\n\nclass PlayButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false,\n    };\n    this.synth = new Tone.AMSynth().toMaster();\n    this.triggerSynth = this.triggerSynth.bind(this);\n  }\n\n  componentDidMount() {\n    Tone.Transport.schedule(this.triggerSynth, 0);\n    Tone.Transport.schedule(this.triggerSynth, '0:2');\n    Tone.Transport.schedule(this.triggerSynth, '0:2:2.5');\n\n    Tone.Transport.loopEnd = '1m'\n    Tone.Transport.loop = true\n  }\n\n  triggerSynth(time) {\n    //the time is the sample-accurate time of the event\n    this.synth.triggerAttackRelease('C2', '8n', time)\n  }\n\n  play() {\n    this.setState({pressed: !this.state.pressed});\n    Tone.Transport.toggle();\n  }\n\n  render() {\n\n    return (\n      <div>\n        <button\n          onMouseDown={() => this.play()}\n          className={this.state.pressed ? \"drum-button pressed\" : \"drum-button\"}\n        />\n      </div>\n    )\n  }\n}\n\nexport default PlayButton;","import React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport DrumButton from './DrumButton';\nimport PlayButton from './PlayButton';\n\nclass Pad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: []\n    };\n    this.returnNote = this.returnNote.bind(this);\n  }\n\n  returnNote(note) {\n    // console.log(time.beg);\n    // console.log(time.end);\n    let sequence = this.state.sequence;\n    console.log(note);\n    sequence.push({ \n      pitch: note.pitch,\n      startTime: note.startTime,\n      endTime: note.endTime\n    })\n    this.setState({ sequence: sequence });\n  }\n\n  render() {\n    return (\n      <div className=\"pad\">\n        <div className=\"play-button\">\n          <Grid container spacing={24} justify=\"center\">\n            <Grid item sm={3}>\n              <DrumButton pitch={'A3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'B3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'C3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'D3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'E3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'F3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'G3'} returnNote={this.returnNote} />\n            </Grid>\n            <Grid item sm={3}>\n              <DrumButton pitch={'A2'} returnNote={this.returnNote} />\n            </Grid>\n          </Grid>\n        </div>\n\n        <div className=\"playback-buttons\">\n          <Grid container spacing={24} justify=\"center\">\n            <PlayButton />\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Pad;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Pad from './components/Pad';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pad />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}