{"version":3,"sources":["components/SynthButton.js","components/PlaybackButton.js","components/RecordButton.js","components/Pad.js","App.js","serviceWorker.js","index.js"],"names":["SynthButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pressed","playSynth","bind","assertThisInitialized","stopSynth","checkMouseDown","synth","Tone","envelope","oscillator","toMaster","startTime","e","preventDefault","setState","triggerAttack","note","currentTime","toFixed","triggerRelease","timeLength","recording","returnNote","pitch","midi","toMidi","length","buttons","_this2","react_default","a","createElement","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseEnter","onMouseLeave","className","Component","PlaybackButton","isPlaying","play","playing","index_es","RecordButton","color","isRecording","record","Pad","sequence","qSequence","unqSequence","octave","music_rnn","mm","quantizeNotes","update_sequence","attack","decay","sustain","release","attackCurve","decayCurve","releaseCurve","type","set","initialize","bool","toggle","setupPlayer","duration","triggerAttackRelease","endTime","forEach","schedule","triggerSynth","loopEnd","loop","mm_sequence","map","toNote","console","log","push","seconds","unquantizedSequence","notes","totalTime","qns","quantizeNoteSequence","_this3","continueSequence","then","sample","unquantizeSequence","_this4","Grid_default","container","spacing","justify","value","index","item","sm","key","components_SynthButton","evelope","components_PlaybackButton","components_RecordButton","onClick","musicRNN","id","App","components_Pad","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.929718b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport * as Tone from 'tone';\n\nclass SynthButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false,\n    };\n    this.playSynth = this.playSynth.bind(this);\n    this.stopSynth = this.stopSynth.bind(this);\n    this.checkMouseDown = this.checkMouseDown.bind(this);\n  }\n\n  componentWillMount() {\n    this.synth = new Tone.Synth({\n      envelope: this.props.envelope,\n      oscillator: this.props.oscillator\n    }).toMaster();\n    this.startTime = null;\n  }\n\n  playSynth(e) {\n    e.preventDefault();\n    this.setState({ pressed: true });\n    this.synth.triggerAttack(this.props.note);\n    this.startTime = Tone.context.currentTime.toFixed(2)\n  }\n\n  stopSynth(e) {\n    e.preventDefault();\n    this.setState({ pressed: false });\n    this.synth.triggerRelease();\n\n    let timeLength = (\n      Tone.context.currentTime.toFixed(2) - this.startTime\n    ).toFixed(2);\n\n    if (this.startTime !== null && this.props.recording) {\n      this.props.returnNote({\n        pitch: this.props.note,\n        midi: Tone.Frequency(this.props.note).toMidi(),\n        length: timeLength,\n      });\n    }\n    this.startTime = null;\n  }\n\n  checkMouseDown(e) {\n    if (e.buttons === 1 || e.buttons === 3) {\n      this.playSynth(e);\n    } else {\n      this.stopSynth(e);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onMouseDown={(e) => this.playSynth(e)}\n          onMouseUp={(e) => this.stopSynth(e)}\n          onTouchStart={(e) => this.playSynth(e)}\n          onTouchEnd={(e) => this.stopSynth(e)}\n          onMouseEnter={(e) => this.checkMouseDown(e)}\n          onMouseLeave={(e) => this.stopSynth(e)}\n          className={this.state.pressed ? \"synth-button pressed\" : \"synth-button\"}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SynthButton;","import React, { Component } from 'react';\n\n// import * as Tone from 'tone';\n// import * as mm from '@magenta/music';\n\nimport { PlayArrow } from '@material-ui/icons';\n\n\nclass PlaybackButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  play() {\n    this.props.isPlaying();\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onMouseDown={() => this.play()}\n          className={this.props.playing ? \"synth-button pressed\" : \"synth-button\"}\n        >\n        <PlayArrow />\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default PlaybackButton;","import React, { Component } from 'react';\n\nimport { FiberManualRecord } from '@material-ui/icons';\n\nclass RecordButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false,\n      color: \"error\",\n    };\n  }\n\n  record() {\n    const {pressed} = this.state;\n    this.props.isRecording(!pressed)\n    this.setState({\n      pressed: !pressed,\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <button\n          onMouseDown={() => this.record()}\n          className={this.state.pressed ? \"synth-button pressed blink_text\" : \"synth-button\"}\n        >\n          <FiberManualRecord className=\"blink_texts\" color=\"error\" />\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default RecordButton;","import React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n// import Slider from '@material-ui/lab/Slider';\n\nimport * as Tone from 'tone';\nimport * as mm from '@magenta/music';\n\nimport SynthButton from './SynthButton';\nimport PlaybackButton from './PlaybackButton';\nimport RecordButton from './RecordButton';\n\nimport { AddToQueue } from '@material-ui/icons';\n\nclass Pad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: [],\n      qSequence: null,\n      unqSequence: null,\n      octave: 3,\n      recording: false,\n      playing: false,\n    };\n    // this.player = new mm.Player();\n    // this.player = new CustomPlayer();\n    this.music_rnn = new mm.MusicRNN('https://storage.googleapis.com/magentadata/js/checkpoints/music_rnn/basic_rnn');\n\n    this.returnNote = this.returnNote.bind(this);\n    this.isRecording = this.isRecording.bind(this);\n    this.isPlaying = this.isPlaying.bind(this);\n    this.quantizeNotes = this.quantizeNotes.bind(this);\n    this.play = this.play.bind(this);\n    this.update_sequence = this.update_sequence.bind(this);\n  }\n\n  componentWillMount() {\n    this.envelope = {\n      attack: 0.01,\n      decay: 0.1,\n      sustain: 0.5,\n      release: 1.0,\n      attackCurve: \"linear\",\n      decayCurve: \"exponential\",\n      releaseCurve: \"exponential\"\n    };\n    this.oscillator = {\n      type: 'sawtooth',\n    }\n    this.synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n    this.synth.set({\n      oscillator: this.oscillator,\n      envelope: this.envelope\n    });\n    this.music_rnn.initialize();\n  }\n\n  async isRecording(bool) {\n    this.setState({ recording: bool });\n    Tone.Transport.toggle()\n    if (!bool) {\n      // if recording has stopped then quantize notes\n      await this.quantizeNotes();\n      this.setupPlayer();\n    }\n  }\n\n  triggerSynth(note, duration) {\n    this.synth.triggerAttackRelease(note, duration);\n  }\n\n  setupPlayer() {\n    // const config = {\n    //   noteHeight: 6,\n    //   pixelsPerTimeStep: 30,  // like a note width\n    //   noteSpacing: 1,\n    //   noteRGB: '245, 245, 245',\n    //   activeNoteRGB: '240, 84, 119',\n    // }\n    // this.viz = new mm.Visualizer(\n    //   this.state.unqSequence,\n    //   document.getElementById('canvas'),\n    //   config);\n\n    // this.player = new mm.Player(false, {\n    //   run: (note) => this.viz.redraw(note),\n    //   stop: () => {this.setState({ playing: false });}\n    // });\n    const { sequence } = this.state;\n    let endTime = 0.0;\n\n    sequence.forEach((note) => {\n      if (note.endTime > endTime) {\n        endTime = note.endTime;\n      }\n      Tone.Transport.schedule(() => {\n        this.triggerSynth(note.note, note.duration)\n      }, note.startTime)\n    });\n\n    Tone.Transport.loopEnd = endTime + 1.0;\n    Tone.Transport.loop = true;\n  }\n\n  isPlaying() {\n    if (this.state.unqSequence) {\n      this.setState({ playing: !this.state.playing });\n      this.play();\n    }\n  }\n\n  play() {\n    // if (this.player.isPlaying()) {\n    //   this.player.stop();\n    //   this.setState({ playing: false });\n    // } else {\n    //   this.player.start(this.state.unqSequence);\n    // }\n    Tone.Transport.toggle();\n  }\n\n  async update_sequence(mm_sequence) {\n    let sequence = mm_sequence;\n    sequence.map((note) => {\n      note.duration = note.endTime - note.startTime\n      note.note = Tone.Frequency(note.pitch, \"midi\").toNote()\n    })\n    console.log(sequence);\n\n    await this.setState({ sequence: sequence })\n    this.setupPlayer();\n\n  }\n\n  returnNote(note) {\n    let sequence = this.state.sequence;\n    // console.log(note);\n    sequence.push({\n      note: note.pitch,\n      pitch: note.midi,\n      startTime: (Tone.Transport.seconds.toFixed(2) - note.length).toFixed(2),\n      endTime: Tone.Transport.seconds.toFixed(2),\n      duration: note.length\n    })\n    this.setState({ sequence: sequence });\n  }\n\n  async quantizeNotes() {\n    let { sequence } = this.state;\n    const unquantizedSequence = {\n      notes: sequence,\n      totalTime: sequence[sequence.length - 1].endTime\n    }\n    const qns = mm.sequences.quantizeNoteSequence(unquantizedSequence, 4);\n    this.setState({ qSequence: qns, unqSequence: unquantizedSequence });\n  }\n\n  musicRNN() {\n    this.music_rnn.continueSequence(this.state.qSequence, 20, 1.5)\n      // .then((sample) => this.player.start(sample));\n      .then((sample) => {\n        this.update_sequence(mm.sequences.unquantizeSequence(sample).notes)\n      });\n    // const qns = mm.sequences.quantizeNoteSequence(ORIGINAL_TWINKLE_TWINKLE, 4);\n  }\n\n  render() {\n    const sm = 2;\n    const octave = this.state.octave;\n    let notes = [\n      'C', 'C#', 'D', 'D#', 'E', 'F',\n      'F#', 'G', 'G#', 'A', 'A#', 'B'\n    ];\n    notes = notes.map(note => note + octave);\n\n    return (\n      <div>\n        <div className=\"pad\">\n          <Grid container spacing={24} justify=\"center\">\n            {notes.map((value, index) => (\n              <Grid item sm={sm} key={index}>\n                <SynthButton\n                  note={value}\n                  returnNote={this.returnNote}\n                  evelope={this.envelope}\n                  oscillator={this.oscillator}\n                  recording={this.state.recording}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n\n        <div className=\"playback-buttons\">\n          <Grid container spacing={24} justify=\"center\">\n            <Grid item sm={2}>\n              <PlaybackButton isPlaying={this.isPlaying} playing={this.state.playing} />\n            </Grid>\n            <Grid item sm={2}>\n              <RecordButton isRecording={this.isRecording} />\n            </Grid>\n            <Grid item sm={2}>\n              <button className=\"synth-button\" onClick={() => this.musicRNN()}>\n                <AddToQueue />\n              </button>\n            </Grid>\n          </Grid>\n        </div>\n        <div className=\"canvas-container\">\n          <canvas id=\"canvas\" />\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Pad;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Pad from './components/Pad';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pad />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}