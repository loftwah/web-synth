{"version":3,"sources":["components/SynthButton.js","components/Pad.js","App.js","serviceWorker.js","index.js"],"names":["SynthButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pressed","playSynth","bind","assertThisInitialized","stopSynth","checkMouseDown","touchMove","synth","Tone","envelope","toMaster","startTime","e","preventDefault","setState","triggerAttack","pitch","currentTime","toFixed","triggerRelease","returnNote","endtime","buttons","console","log","_this2","react_default","a","createElement","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseEnter","onMouseLeave","className","Component","Pad","sequence","octave","attack","decay","sustain","release","attackCurve","decayCurve","releaseCurve","note","push","endTime","notes","map","Grid_default","container","spacing","justify","value","index","item","sm","key","components_SynthButton","evelope","App","components_Pad","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9d9e29f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport * as Tone from 'tone';\n//import * as mm from '@magenta/music';\n\n\nclass SynthButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false,\n    };\n    this.playSynth = this.playSynth.bind(this);\n    this.stopSynth = this.stopSynth.bind(this);\n    this.checkMouseDown = this.checkMouseDown.bind(this);\n    this.touchMove = this.touchMove.bind(this);\n  }\n\n  componentWillMount() {\n    this.synth = new Tone.Synth({\n      envelope: this.props.envelope \n    }).toMaster();\n    this.startTime = null;\n  }\n\n  playSynth(e) {\n    e.preventDefault();\n    // console.log('play note');\n    this.setState({ pressed: true });\n    this.synth.triggerAttack(this.props.pitch);\n    this.startTime = Tone.context.currentTime.toFixed(2)\n  }\n\n  stopSynth(e) {\n    e.preventDefault();\n    this.setState({ pressed: false });\n    this.synth.triggerRelease();\n    if (this.startTime !== null) {\n      this.props.returnNote({\n        pitch: this.props.pitch,\n        startTime: this.startTime,\n        endtime: Tone.context.currentTime.toFixed(2)\n      });\n    }\n    this.startTime = null;\n  }\n\n  checkMouseDown(e) {\n    if (e.buttons === 1 || e.buttons === 3) {\n      this.playSynth(e);\n    } else {\n      this.stopSynth(e);\n    }\n  }\n\n  touchMove(e) {\n    console.log(e);\n    console.log(this.props.pitch);\n    this.setState({ pressed: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          onMouseDown={(e) => this.playSynth(e)}\n          onMouseUp={(e) => this.stopSynth(e)}\n          onTouchStart={(e) => this.playSynth(e)}\n          onTouchEnd={(e) => this.stopSynth(e)}\n          onMouseEnter={(e) => this.checkMouseDown(e)}\n          onMouseLeave={(e) => this.stopSynth(e)}\n          className={this.state.pressed ? \"drum-button pressed\" : \"drum-button\"}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SynthButton;","import React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n// import Slider from '@material-ui/lab/Slider';\n\n// import * as Tone from 'tone';\n\nimport SynthButton from './SynthButton';\n// import PlayButton from './PlayButton';\n// import PlaybackButton from './PlaybackButton';\n\nclass Pad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: [],\n      octave: 3,\n    };\n    this.returnNote = this.returnNote.bind(this);\n  }\n\n  componentWillMount() {\n    this.envelope = {\n      attack: 0.01,\n      decay: 0.1,\n      sustain: 0.5,\n      release: 1.0,\n      attackCurve: \"linear\",\n      decayCurve: \"exponential\",\n      releaseCurve: \"exponential\"\n    }\n\n  }\n\n  returnNote(note) {\n    // console.log(time.beg);\n    // console.log(time.end);\n    let sequence = this.state.sequence;\n    console.log(note);\n    sequence.push({\n      pitch: note.pitch,\n      startTime: note.startTime,\n      endTime: note.endTime\n    })\n    this.setState({ sequence: sequence });\n  }\n\n  render() {\n    const sm = 2;\n    const octave = this.state.octave;\n    let notes = [\n      'C', 'C#', 'D', 'D#', 'E', 'F',\n     'F#', 'G', 'G#', 'A', 'A#', 'B'\n    ];\n\n    notes = notes.map(note => note + octave);\n\n    return (\n      <div className=\"pad\">\n        <Grid container spacing={24} justify=\"center\">\n          {notes.map((value, index) => (\n            <Grid item sm={sm} key={index}>\n              <SynthButton\n                pitch={value}\n                returnNote={this.returnNote}\n                evelope={this.envelope}\n              />\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n\n      // <div className=\"playback-buttons\">\n      //   <Grid container spacing={24} justify=\"center\">\n      //     {/* <PlayButton /> */}\n      //     <PlaybackButton />\n      //   </Grid>\n      // </div>\n    )\n  }\n}\n\nexport default Pad;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Pad from './components/Pad';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pad />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}